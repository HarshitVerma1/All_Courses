# Problem 7
#  Bookmark this page
# Problem 7-1
# 2.0/2.0 points (graded)
# Graphs are a convenient way to represent the relations between people, objects, concepts, and more.

# There are many ways to create a graph, some of which are random. A random graph is one that is generated by randomly adding edges to a
# list of nodes. The list of nodes for this problem is initialized as follows:
nodes = []
for i in range(n):
    nodes.append(newNode(i)) # newNode takes one parameter, the number of the node

# A helper method, addEdge, is referenced in this problem. The addEdge method takes two integers - representing nodes in the graph - and
# adds a directed edge from the first node to the second node. So, addEdge(8, 2) adds a directed edge from Node 8 to Node 2.

# In each code piece below, a graph is generated using the above node set by adding edges in some fashion. Your job is to examine the
# code and select the type of graph that will be generated. Your choices for each question will be: tree; graph (undirected graph); line
# graph; digraph (directed graph); complete graph or clique; bar graph; bipartite graph; loop or connected chain of nodes. Note that
# this last option refers to a graph that consists of one single, large loop or connected chain of nodes.

for i in range(len(nodes)):
	x = random.choice(nodes)
	y = random.choice(nodes)
	addEdge(x,y)
	
# digraph (directed graph) correct


# Problem 7-2
# 2.0/2.0 points (graded)

for i in range(len(nodes)):
	x = random.choice(nodes)
	y = random.choice(nodes)
	addEdge(x,y)
	addEdge(y,x)
	
# graph (undirected graph) correct


# Problem 7-3
# 0.0/2.0 points (graded)

for i in range(len(nodes)):
	w = random.choice(nodes)
	x = random.choice(nodes)
	y = random.choice(nodes)
	z = random.choice(nodes)
	addEdge(w,x)
	addEdge(x,y)
	addEdge(y,z)
	addEdge(z,w)
	
# loop or connected chain of nodes incorrect


# Problem 7-4
# 2.0/2.0 points (graded)

for x in nodes:
	for y in nodes:
		addEdge(x,y)
		addEdge(y,x)
	
# complete graph or clique correct


# Problem 7-5
# 2.0/2.0 points (graded)
# The out degree of a node is the number of its neighbors, i.e. for a node x, its degree is the number edges, of the form (x, y_i),
# where y_i is some other node.
# Which graph has the largest out degree per node?

# complete graph or clique correct
